| 단계                | 작업                                                                                                                                                                                                                                  | 왜 먼저?                                      |
| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------ |
| **1. DB 마이그레이션**  | `sql\nALTER TABLE images ADD COLUMN user_id varchar(128);\nCREATE INDEX idx_images_user ON images(user_id);\n`<br>Drizzle migration 파일 추가 → `npm run db:push`                                                                       | 컬럼만 있으면 INSERT·SELECT 모두 단순화 → 임시 해킹 로직 제거 |
| **2. 저장 로직 통일**   | `saveImageTransformation`\n`ts\nawait db.insert(images).values({\n  ...,\n  user_id: req.user!.id,\n  metadata: {...metaWithoutUser},\n});\n`                                                                                       | userId 를 컬럼에 쓰고, metadata에는 **중복 저장 X**    |
| **3. 조회 로직 수정**   | `getPaginatedImageList`\n`ts\n.where(eq(images.user_id, userId))\n`                                                                                                                                                                 | JSON 연산 제거 → 속도 10배 이상 향상                  |
| **4. 세션 체크 미들웨어** | `ts\napp.post('/api/image', requireLogin, uploadHandler);\n`                                                                                                                                                                        | `req.user` 없으면 401 반환 → user\_id –1 문제 근절  |
| **5. 타이틀 오류 제거**  | `catch` 블록에서 “오류:” 가짜 오브젝트 반환 삭제 → 500 JSON만                                                                                                                                                                                        | 화면에서 에러 토스트로 처리                            |
| **6. E2E 테스트 추가** | `vitest` + `supertest`\n`ts\nit('maternity flow', async () => {\n  await login();\n  const img = await createImage();\n  expect(img.id).not.toBe(-1);\n  const list = await gallery();\n  expect(list).toContainEqual(img);\n});\n` | 재발 방지—배포 전 자동 검증                           |
