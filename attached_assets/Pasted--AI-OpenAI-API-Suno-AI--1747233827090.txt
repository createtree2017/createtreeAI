라플아, 다음 지침에 따라 "창조AI 서비스"의 음악 생성 기능 개발을 진행해 주길 바란다.

**🎯 최우선 목표: OpenAI API 연동 안정화 및 Suno AI 스타일 음악 서비스 MVP 핵심 기능 구현**

**현재 상황 및 문제점:**
1.  **OpenAI API 연동 불안정:** 가사 생성을 위한 OpenAI API 연동 과정에서 `OpenAI is not a constructor` 등의 ES 모듈 관련 오류가 지속적으로 발생하여 현재 "임시 API 클라이언트"로 동작 중이다. 이는 핵심 기능의 불안정성을 야기하므로 최우선으로 해결해야 한다.
2.  **Suno AI 벤치마킹 구체성 부족:** 현재 "Suno 스타일"이라고는 하지만, 구체적으로 어떤 기능을 어떻게 구현할지에 대한 계획이 명확하지 않다.
3.  **UI 완성도 및 오류:** 현재 UI는 기능 구현 초기 단계이며, `<Select.Item />` value prop 누락 등의 오류도 발생하고 있다. (대표님께서 `image_2f5253.png` 로 전달해주신 내용 참고)

**✅ 즉시 수행해야 할 작업 (OpenAI API 연동 안정화):**

1.  **`server/services/lyrics-service.ts` 파일 집중 검토 및 수정:**
    * **정확한 OpenAI SDK 버전 확인:** `package.json`을 통해 현재 설치된 `openai` 패키지의 정확한 버전을 다시 한번 확인한다. (이전에 4.98.0으로 확인되었으나, 문제 해결을 위해 재확인)
    * **올바른 ES Module Import 방식 적용:**
        * `openai.js`와 같이 프로젝트 내부에 별도로 만든 OpenAI 관련 래퍼(wrapper) 파일이 있다면 **모두 삭제**하고, `node_modules`에 설치된 `openai` 패키지를 직접 참조하도록 한다.
        * OpenAI SDK v4 이상의 버전을 사용하고 있다면, 공식 문서에 명시된 ES Module import 방식을 정확히 따른다. (일반적으로 `import OpenAI from 'openai';`)
        * `lyrics-service.ts` 파일 상단에서 위 import 구문을 사용하고, OpenAI 클라이언트 인스턴스 생성 시 `new OpenAI({ apiKey: process.env.OPENAI_API_KEY });` 와 같이 API 키가 정상적으로 주입되는지 확인한다. (환경 변수 `OPENAI_API_KEY` 가 Replit Secrets에 올바르게 설정되어 있는지 재확인)
    * **오류 발생 시 상세 로그 기록:** `try...catch` 구문을 사용하여 OpenAI API 호출 및 클라이언트 초기화 과정에서 발생하는 모든 오류를 상세히 로깅하여 원인 파악이 용이하도록 한다. (예: `console.error('OpenAI 클라이언트 초기화 오류:', error);`)
    * **단계별 테스트:** 코드를 수정한 후에는 서버를 재시작하고, 간단한 가사 생성 요청을 보내 API가 정상적으로 응답하는지 반드시 테스트한다. "임시 API 클라이언트"가 아닌, 실제 OpenAI API 연동으로 동작해야 한다.

**🎶 Suno AI 스타일 음악 서비스 MVP 핵심 기능 구현 방향:**

OpenAI API 연동이 안정화된 후, 다음 MVP 핵심 기능을 순차적으로 구현한다. (UI/UX는 기능 구현 후 별도 지시에 따라 개선 예정)

1.  **기본 음악 생성 기능 (Replicate API 활용):**
    * **입력:**
        * 사용자 텍스트 프롬프트 (음악의 분위기, 내용 등)
        * 음악 스타일/장르 선택 (예: 자장가, 신나는, 잔잔한 등 드롭다운/버튼 형태) - `창조ai_개발히스토리_워크플로 총정리_0514.txt` 문서의 "모듈별 기능 & 현행 워크플로 - ① 이미지 생성" 부분에서 스타일 선택 방식을 참고할 수 있다.
    * **처리:**
        * 입력값을 Replicate API가 요구하는 형식으로 조합하여 음악 생성 요청.
        * API 응답 대기 및 결과 수신.
    * **출력:**
        * 생성된 음악 파일을 재생할 수 있도록 `MusicPlayer.tsx` 와 연동.
        * 생성된 음악 정보(제목, 프롬프트, 스타일, 파일 경로/URL 등)를 `music` DB 테이블에 저장. (`shared/schema.ts` 참고)

2.  **자동 가사 생성 기능 (안정화된 OpenAI API 활용):**
    * **입력:** 음악 생성 시 사용된 텍스트 프롬프트 또는 음악 주제.
    * **처리:** OpenAI API (Chat Completions 또는 적합한 모델)를 호출하여 프롬프트에 어울리는 가사 생성.
    * **출력:** 생성된 가사를 화면에 표시하고, 음악 정보와 함께 DB에 저장.

3.  **프론트엔드 기본 구성:**
    * **`client/src/components/music/MusicForm.tsx`:**
        * 텍스트 프롬프트 입력 필드.
        * 음악 스타일/장르 선택 UI (현재 `<Select.Item />` 오류 해결 필수. `value` prop이 비어있지 않도록 하거나, UI 라이브러리 가이드에 따라 플레이스홀더 처리).
        * "음악 생성" 버튼.
    * **`client/src/components/music/MusicPlayer.tsx`:**
        * 생성된 음악 재생, 일시정지, 정지 기능.
        * (필요시) 간단한 볼륨 조절.
    * **`client/src/pages/lullaby.tsx` (또는 일반적인 음악 생성 페이지):**
        * `MusicForm.tsx` 와 `MusicPlayer.tsx` 를 포함하여 사용자가 음악을 생성하고 바로 들어볼 수 있는 흐름 제공.
        * (추후 확장) `MusicGallery.tsx` 를 통해 이전에 생성한 음악 목록을 보여주고 재생할 수 있도록 연동.

**⚙️ 기타 지침 및 유의사항:**

* **`replit_agent/user_preferences.md` 파일의 모든 지침을 반드시 준수**하며 개발한다. (API 경로, 권한, React Query 사용, 코드 품질, 오류 처리 등)
* 모든 작업은 **Git을 통해 버전 관리**하고, 의미 있는 단위로 커밋 메시지를 작성한다. (`feat:`, `fix:`, `refactor:` 등)
* 코드 수정 후에는 반드시 **로컬 환경에서 충분히 테스트**한 후, 서버를 재시작하여 변경사항을 확인한다.
* 오류 발생 시, **오류 메시지를 정확히 기록하고 분석**하여 보고한다. 어떤 시도를 했고, 그 결과가 어떠했는지 명확히 전달한다.
* UI/UX는 현재 기능 구현에 집중하되, 대표님의 최종 목표는 **Suno AI 수준의 사용자 친화적인 서비스**임을 인지하고, 향후 개선 작업을 염두에 두고 확장 가능한 구조로 개발한다.

**우선 OpenAI API 연동 안정화 작업부터 시작하고, 완료되는 대로 보고 바란다.** 문제가 지속될 경우, 구체적인 오류 로그와 함께 현재 `lyrics-service.ts` 코드 전체, `package.json` 파일 내용을 공유하면 추가 지원하겠다.

행운을 빈다!