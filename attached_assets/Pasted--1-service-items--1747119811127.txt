“▶︎” 로 시작하는 줄은 명령이고, 그 밑에 … 안은 수정할 코드(통째로 교체) 혹은 터미널 명령 입니다.

1️⃣ 백엔드 : 사이드바·내부화면이 service_items 를 읽도록 API 통일
1‑1. routes.ts – 메뉴 API 하나로 정리
▶︎ server/routes.ts 의 최상단 import 에 추가

ts
복사
편집
import { serviceItems } from "@/shared/schema";
▶︎ server/routes.ts 안에 “/api/menu” 새 라우트 추가

ts
복사
편집
// --- public menu (카테고리 + 하위메뉴) --------------------------
app.get("/api/menu", async (req, res) => {
  try {
    const rows = await db
      .select({
        categoryId: serviceCategories.id,
        categoryTitle: serviceCategories.title,
        itemId: serviceItems.itemId,
        itemTitle: serviceItems.title,
        path: serviceItems.path,
        order: serviceItems.order,
      })
      .from(serviceItems)
      .innerJoin(serviceCategories, eq(serviceItems.categoryId, serviceCategories.id))
      .where(eq(serviceItems.isPublic, true))
      .orderBy(serviceCategories.order, serviceItems.order);

    // { categoryTitle: "...", items:[...] } 형태로 묶기
    const grouped = Object.values(
      rows.reduce<Record<number, any>>((acc, r) => {
        if (!acc[r.categoryId]) {
          acc[r.categoryId] = { title: r.categoryTitle, items: [] };
        }
        acc[r.categoryId].items.push({
          id: r.itemId,
          title: r.itemTitle,
          path: r.path,
        });
        return acc;
      }, {})
    );
    res.json(grouped);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: "menu-error" });
  }
});
2️⃣ 프론트 : 사이드바 & 내부 페이지를 /api/menu 한 번만 호출
2‑1. apiClient.ts
▶︎ client/src/lib/apiClient.ts 맨 아래에 추가

ts
복사
편집
export const getMenu = () => axios.get("/api/menu").then(r => r.data);
2‑2. Sidebar.tsx
▶︎ client/src/components/layout/Sidebar.tsx (존재 파일) 전체를 다음으로 교체

tsx
복사
편집
import { useQuery } from "@tanstack/react-query";
import { getMenu } from "@/lib/apiClient";
import { Link, useLocation } from "wouter";

export default function Sidebar() {
  const { data = [] } = useQuery(["menu"], getMenu, { staleTime: 5 * 60_000 });
  const [location] = useLocation();

  return (
    <aside className="w-56 bg-zinc-950 text-white h-full overflow-y-auto">
      {data.map((cat: any) => (
        <div key={cat.title} className="mb-6">
          <h3 className="px-4 py-2 font-semibold text-sm text-zinc-400 uppercase">
            {cat.title}
          </h3>
          {cat.items.map((it: any) => (
            <Link
              key={it.id}
              href={it.path}
              className={`block px-6 py-2 text-sm ${
                location === it.path ? "bg-zinc-800 text-indigo-400" : "hover:bg-zinc-800"
              }`}
            >
              {it.title}
            </Link>
          ))}
        </div>
      ))}
    </aside>
  );
}
2‑3. 내부 페이지(만삭사진 만들기 등)
기존엔 하드코딩 된 라벨을 썼을 가능성이 높습니다.
공통 컴포넌트로 아래 헬퍼를 만들어 라벨을 받아오도록 바꿉니다.

▶︎ client/src/hooks/useServiceItem.ts

ts
복사
편집
import { useQuery } from "@tanstack/react-query";
import { getMenu } from "@/lib/apiClient";

export const useServiceItem = (path: string) => {
  const { data = [] } = useQuery(["menu"], getMenu);
  for (const cat of data) {
    const item = (cat.items ?? []).find((i: any) => i.path === path);
    if (item) return item;
  }
  return null;
};
▶︎ 만삭사진 페이지 예시 client/src/pages/image/Pregnant.tsx

tsx
복사
편집
import { useServiceItem } from "@/hooks/useServiceItem";
import { useLocation } from "wouter";

export default function Pregnant() {
  const [loc] = useLocation();
  const item = useServiceItem(loc);

  return (
    <div className="p-6">
      <h1 className="text-xl font-bold mb-4">
        {item?.title ?? "만삭사진"}  {/* 동적 라벨 */}
      </h1>
      {/* ... 나머지 로직 그대로 ... */}
    </div>
  );
}
다른 내부 페이지(가족사진, 스티커 등)도 같은 방식으로 useServiceItem 사용.

3️⃣ 항목 수정 후 화면이 즉시 갱신되지 않는 문제
ServiceItemManagement 컴포넌트에서 저장 뒤 아래 한 줄만 추가하면 끝납니다.

▶︎ client/src/components/admin/ServiceItemManagement.tsx (업데이트 or 생성 호출 성공 콜백)

ts
복사
편집
onSuccess: () => {
  queryClient.invalidateQueries(["service-items"]);
  queryClient.invalidateQueries(["menu"]);   // ← 추가
  toast.success("저장되었습니다");
},
4️⃣ 데이터 확인 & 캐시 무효화
nginx
복사
편집
npm run dev          # 서버·클라 동시 실행
# 브라우저 새로고침 (Ctrl+Shift+R) 후
# ① 관리자 → 하위메뉴 수정 → 저장
# ② 사이드바 / 내부 페이지에서 즉시 이름이 바뀌는지 확인
✅ 결과
관리자 패널 에서 바꾼 제목 → 사이드 메뉴와 내부 화면 제목 모두 실시간 반영

카테고리 필터 “AI 이미지 만들기” 선택 시 정상 목록 표시

한 API(/api/menu) 만으로 메뉴·타이틀 모두 일관 관리