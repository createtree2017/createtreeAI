[작업지시서: Suno 웹 자동화 기반 AI 음악 생성 서비스 통합 개발]

목적:
- Suno 공식 웹사이트를 브라우저 자동화(Puppeteer)로 제어하여, 사용자의 프롬프트 및 옵션 기반 AI 음악을 생성하고, 생성된 mp3/가사/메타데이터를 자동으로 추출·DB에 저장·사용자 서비스에 제공하는 전체 시스템을 구현한다.

작업 범위:
1. **Suno 웹 자동화**
   - Puppeteer 등 Node.js 기반 브라우저 자동화 툴로 Suno 웹(https://app.suno.ai) 접속
   - 대표님이 제공한 Suno 유료 계정의 세션 쿠키/로그인 정보를 사용해 자동 로그인
   - 프롬프트, 장르/스타일, 가사(자동/직접), 보컬 성별, 길이 등 옵션을 UI에 자동 입력
   - 'Create' 버튼 클릭 후, 곡 생성 완료까지 대기(상태 Polling, 생성 대기 UI/로딩 인디케이터 지원)
   - 생성된 곡의 mp3 오디오, 가사, 썸네일/커버이미지, 곡 길이/스타일 등 메타데이터 자동 추출

2. **mp3/가사/메타데이터 저장 및 DB 연동**
   - 추출된 mp3 파일을 서버(Storage/Uploads)에 저장, URL 자동 생성
   - 가사, 제목, 프롬프트, 옵션 등 메타데이터를 DB(Music 테이블)에 저장(Drizzle ORM 등 기존 구조 연동)
   - 사용자가 자신의 '내 음악' 목록에서 생성 결과를 확인, 재생, 다운로드할 수 있도록 API/프론트 연동

3. **API/서비스 통합**
   - `/api/music/generate`로 Suno 자동화 음악생성 요청 → 진행상태 polling → 생성 완료 후 파일/메타데이터 반환
   - 프론트엔드에서는 Suno-style과 동일하게 프롬프트/옵션 입력 → "생성" → 생성 진행 중/완료 UI, 재생/다운로드 UI
   - 오디오 wave 시각화/플레이어 연동(react-audio-player, waveform.js 등 활용)
   - 장애 발생(로그인 풀림/생성 실패 등) 시 자동재시도 및 관리자/사용자 에러 안내

4. **자동화 유지·쿠키 관리**
   - Suno 쿠키 만료 시 대표님이 새 쿠키를 전달, 자동화 스크립트에 반영(쿠키 최신상태 유지)
   - 장애/변경 대응(웹 UI 변경 시 자동화 코드 패치)

5. **(옵션) 확장 기능**
   - 사용자가 직접 목소리 업로드(Voice Cloning) → AI 커버 자동합성(후순위 개발)
   - 곡별 장르/성별/보컬옵션을 Suno 최신 옵션에 맞춰 지속 업데이트
   - 관리자 페이지에서 전체 생성/다운로드 이력, 에러 로그, 장애상황 실시간 모니터링 구현

실행 전 준비자료(대표님 준비):
- Suno 유료 계정 로그인 세션 쿠키 파일(*.txt/json) 1부 (최신)
- 테스트 프롬프트/옵션 예시 3~5개(없으면 기본 템플릿으로 진행)
- DB/파일 저장 경로 등 사전 설정(라플이/개발팀에서 기본 세팅 가능)

유의사항:
- Suno 이용규정/서비스 약관 준수
- 자동화 시 Chrome Headless, IP 차단 등 대응 로직 포함
- 보안상 쿠키/로그인 정보 외부 유출 금지

진행 시 우선 아래 우선순위로 개발:
  1) 단일 프롬프트→곡 자동생성→mp3/가사/메타데이터 추출→DB 저장까지 End-to-End 테스트
  2) 여러 곡/옵션/장르/성별 등 다양한 생성 옵션 자동화 테스트
  3) 에러/예외 케이스 시 처리 로직(재시도/쿠키갱신/에러로그 등)
  4) 사용자 서비스/프론트엔드 연동 및 시각화 UI/UX

완료 후:
- 테스트 곡 생성 결과(mp3/가사/메타/URL), 자동화 로그, 장애보고서 송기우 대표에게 제출

[참고] 자동화 핵심 예시코드(Puppeteer):
  - Suno 로그인 세션 쿠키 적용
  - 프롬프트/옵션 자동입력 및 곡 생성 버튼 클릭
  - 생성 완료 대기 후 mp3/가사/메타데이터 추출 및 파일저장

[질문 및 장애 발생시] 모든 상황을 상세히 기록하여 송기우 대표에게 보고

